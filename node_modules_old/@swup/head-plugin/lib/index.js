'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _plugin = require('@swup/plugin');

var _plugin2 = _interopRequireDefault(_plugin);

var _mergeHeadContents2 = require('./mergeHeadContents.js');

var _mergeHeadContents3 = _interopRequireDefault(_mergeHeadContents2);

var _updateLangAttribute = require('./updateLangAttribute.js');

var _updateLangAttribute2 = _interopRequireDefault(_updateLangAttribute);

var _waitForAssets = require('./waitForAssets.js');

var _waitForAssets2 = _interopRequireDefault(_waitForAssets);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var HeadPlugin = function (_Plugin) {
	_inherits(HeadPlugin, _Plugin);

	function HeadPlugin() {
		var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

		_classCallCheck(this, HeadPlugin);

		var _this = _possibleConstructorReturn(this, (HeadPlugin.__proto__ || Object.getPrototypeOf(HeadPlugin)).call(this));

		_this.name = 'HeadPlugin';
		_this.assetLoadPromises = [];

		_this.updateHead = function () {
			var newPageHtml = _this.swup.cache.getCurrentPage().originalContent;
			var newDocument = new DOMParser().parseFromString(newPageHtml, 'text/html');

			var _mergeHeadContents = (0, _mergeHeadContents3.default)(document.head, newDocument.head, { shouldPersist: _this.isPersistentTag }),
			    removed = _mergeHeadContents.removed,
			    added = _mergeHeadContents.added;

			var lang = (0, _updateLangAttribute2.default)(document.documentElement, newDocument.documentElement);

			_this.swup.log('Removed ' + removed.length + ' / added ' + added.length + ' tags in head');
			if (lang) {
				_this.swup.log('Updated lang attribute: ' + lang);
			}

			if (_this.options.awaitAssets) {
				_this.assetLoadPromises = (0, _waitForAssets2.default)(added, _this.options.timeout);
			} else {
				_this.assetLoadPromises = [];
			}

			newDocument.documentElement.innerHTML = '';
			newDocument = null;
		};

		_this.isPersistentTag = function (el) {
			var persistTags = _this.options.persistTags;

			if (typeof persistTags === 'function') {
				return persistTags(el);
			}
			if (typeof persistTags === 'string') {
				return el.matches(persistTags);
			}
			return Boolean(persistTags);
		};

		_this.options = _extends({
			persistTags: false,
			persistAssets: false,
			awaitAssets: false,
			timeout: 3000
		}, options);
		return _this;
	}

	_createClass(HeadPlugin, [{
		key: 'mount',
		value: function mount() {
			this.validateOptions();

			// Replace head contents right before content itself
			this.swup.on('willReplaceContent', this.updateHead);

			// Overwrite swup's replaceContent to let us defer until all assets are loaded
			if (this.options.awaitAssets) {
				this.originalSwupReplaceContent = this.swup.replaceContent.bind(this.swup);
				this.swup.replaceContent = this.replaceContentAfterAssetsLoaded.bind(this);
			}
		}
	}, {
		key: 'unmount',
		value: function unmount() {
			this.swup.off('willReplaceContent', this.updateHead);

			if (this.originalSwupReplaceContent) {
				this.swup.replaceContent = this.originalSwupReplaceContent;
				this.originalSwupReplaceContent = null;
			}
		}
	}, {
		key: 'validateOptions',
		value: function validateOptions() {
			// options.persistAssets is a shortcut for:
			// options.persistTags with a default asset selector for scripts & styles
			if (this.options.persistAssets && !this.options.persistTags) {
				this.options.persistTags = 'link[rel=stylesheet], script[src], style';
			}

			// Make sure the swup version in use supports hooking into `replaceContent`
			if (this.options.awaitAssets && !this.swup.replaceContent) {
				this.options.awaitAssets = false;
				console.error('[Swup Head Plugin] Installed version of swup doesn\'t support awaitAssets option');
			}
		}
	}, {
		key: 'replaceContentAfterAssetsLoaded',
		value: function replaceContentAfterAssetsLoaded() {
			var _this2 = this;

			for (var _len = arguments.length, originalArgs = Array(_len), _key = 0; _key < _len; _key++) {
				originalArgs[_key] = arguments[_key];
			}

			if (this.assetLoadPromises.length) {
				this.swup.log('Waiting for ' + this.assetLoadPromises.length + ' assets to load');
				return new Promise(function (resolve) {
					Promise.all(_this2.assetLoadPromises).then(function () {
						_this2.assetLoadPromises = [];
						_this2.originalSwupReplaceContent.apply(_this2, originalArgs).then(resolve);
					});
				});
			} else {
				return this.originalSwupReplaceContent.apply(this, originalArgs);
			}
		}
	}]);

	return HeadPlugin;
}(_plugin2.default);

exports.default = HeadPlugin;