'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = mergeHeadContents;
function mergeHeadContents(currentHead, newHead) {
	var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	    _ref$shouldPersist = _ref.shouldPersist,
	    shouldPersist = _ref$shouldPersist === undefined ? function () {
		return false;
	} : _ref$shouldPersist;

	var themeActive = Boolean(document.querySelector('[data-swup-theme]'));

	var currentTags = Array.from(currentHead.children);
	var newChildren = Array.from(newHead.children);

	var addTags = getTagsToAdd(currentTags, newChildren, { themeActive: themeActive });
	var removeTags = getTagsToRemove(currentTags, newChildren);

	// Remove tags in reverse to keep indexes, keep persistant elements
	removeTags.reverse().filter(function (_ref2) {
		var el = _ref2.el;
		return shouldManageTag(el);
	}).filter(function (_ref3) {
		var el = _ref3.el;
		return !shouldPersist(el);
	}).forEach(function (_ref4) {
		var el = _ref4.el;
		return currentHead.removeChild(el);
	});

	// Insert tag *after* previous version of itself to preserve JS variable scope and CSS cascaade
	addTags.filter(function (_ref5) {
		var el = _ref5.el;
		return shouldManageTag(el);
	}).forEach(function (_ref6) {
		var el = _ref6.el,
		    index = _ref6.index;

		currentHead.insertBefore(el, currentHead.children[index + 1] || null);
	});

	return {
		removed: removeTags.map(function (_ref7) {
			var el = _ref7.el;
			return el;
		}),
		added: addTags.map(function (_ref8) {
			var el = _ref8.el;
			return el;
		})
	};
};

function getTagsToRemove(currentEls, newEls) {
	return currentEls.reduce(function (tags, el) {
		var isAmongNew = newEls.some(function (newEl) {
			return compareTags(el, newEl);
		});
		var isThemeTag = el.matches('[data-swup-theme]');
		if (!isAmongNew && !isThemeTag) {
			tags.push({ el: el });
		}
		return tags;
	}, []);
};

function getTagsToAdd(currentEls, newEls, _ref9) {
	var themeActive = _ref9.themeActive;

	return newEls.reduce(function (tags, el, i) {
		var isAmongCurrent = currentEls.some(function (currentEl) {
			return compareTags(el, currentEl);
		});
		if (!isAmongCurrent) {
			var index = themeActive ? i + 1 : i;
			tags.push({ el: el, index: index });
		}
		return tags;
	}, []);
};

function shouldManageTag(el) {
	return el.localName !== 'title'; // swup manages title itself
}

function compareTags(oldTag, newTag) {
	return oldTag.outerHTML === newTag.outerHTML;
}